{"version":3,"sources":["stroe/index.js","constants.js","stroe/addtodo.js","components/todoheader.js","components/todoitem.js","components/todoitems.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["todomodel","store","title","completed","id","this","todoss","remove","observable","action","addtodo","lastid","todos","filter","todo","push","checked","forEach","reduce","sum","length","activeTodoCount","computed","Todoheader","state","value","handleKeyDown","event","keyCode","preventDefault","Addtodo","setState","className","onChange","target","onKeyDown","type","placeholder","Component","Todoitem","observer","onToggle","props","toggle","Destroy","handleDestroy","onClick","Todoitems","todosfiltered","map","Footer","clearCompleted","getall","getactive","getcompleted","style","backgroundColor","completedCount","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e9ca85b.chunk.js","sourcesContent":["\r\nimport {action,observable} from \"mobx\"\r\n\r\nexport default class todomodel{\r\n    store\r\n    id\r\n   @observable title\r\n   @observable completed\r\n\r\n   constructor (store,title,completed,id){\r\n       this.title = title\r\n       this.completed = completed\r\n       this.id = id \r\n       this.store = store\r\n   }\r\n\r\n    @action\r\n    toggle(){\r\n        this.completed = !this.completed\r\n    }\r\n\r\n    @action\r\n    handleDestroy(){\r\n        this.store.todoss.remove(this)\r\n    }\r\n\r\n    setTitle(title) {\r\n\t\tthis.title = title;\r\n\t}\r\n\r\n\ttoJS() {\r\n\t\treturn {\r\n\t\t\tid: this.id,\r\n\t\t\ttitle: this.title,\r\n\t\t\tcompleted: this.completed\r\n\t\t}}\r\n\r\n\r\n    \r\n}\r\n","export const ALL_TODOS = 'all';\nexport const ACTIVE_TODOS = 'active';\nexport const COMPLETED_TODOS = 'completed';\n","import { observable, action , computed} from \"mobx\"\r\nimport todomodel from \"./\"\r\nimport * as Utils from '../utils';\r\nimport { ALL_TODOS } from '../constants';\r\nimport { Children } from \"react\";\r\n\r\n class Addtodo {\r\n\r\n@observable todos = [] \r\n\tlastid = 0\r\n\t@observable todoss = this.todos\r\n\r\n\t@action \r\n\tgetall(){\r\n\t\tthis.todoss = this.todos\r\n\t\t\t\r\n\t\t\r\n\t}\r\n\r\n\t@action\r\n\tgetactive(){\r\n\t\tthis.todoss = this.todos.filter(\r\n\t\t\ttodo => !todo.completed\r\n\t\t)\r\n\t}\r\n\r\n\t@action\r\n\tgetcompleted(){\r\n\t\tthis.todoss = this.todos.filter(\r\n\t\t\ttodo => todo.completed\r\n\t\t)\r\n\t}\r\n\r\n    @action\r\n    addtodo(title){\r\n        this.todos.push(new todomodel(this,title,false,this.lastid ++))\r\n    }\r\n\r\n    @computed get activeTodoCount() {\r\n\t\treturn this.todos.reduce(\r\n\t\t\t(sum, todo) => sum + (todo.completed ? 0 : 1),\r\n\t\t\t0\r\n\t\t)\r\n\t}\r\n\r\n\t@computed get completedCount() {\r\n\t\treturn this.todoss.length - this.activeTodoCount;\r\n\t\t\t\r\n    }\r\n    \r\n    @action\r\n\ttoggleAll (checked) {\r\n\t\tthis.todos.forEach(\r\n\t\t\ttodo => todo.completed = checked\r\n\t\t);\r\n\t}\r\n\r\n\t@action\r\n\tclearCompleted() {\r\n\t\tthis.todoss = this.todos.filter(\r\n\t\t\ttodo => !todo.completed\r\n\t\t);\r\n\t\tthis.todos = this.todoss;\t\r\n\t}\r\n\r\n\t@computed get todoscompletedcount() {\r\n\t\treturn this.todos.filter(todo =>todo.completed).length;\r\n\t}\r\n\r\n\t\t\r\n\r\n}\r\nconst addtodo = new Addtodo()\r\nexport default addtodo\r\n\r\n\r\n\r\n","import React,{Component} from \"react\"\r\nimport Addtodo from \"../stroe/addtodo\"\r\n\r\n export default  class Todoheader extends Component{\r\n     state = {\r\n         value:\"\"\r\n     }\r\n\r\n     handleKeyDown = event=> {\r\n        if (event.keyCode!==13){\r\n            return;\r\n        }\r\n        event.preventDefault()\r\n        Addtodo.addtodo(this.state.value)\r\n        this.setState({\r\n            value:''\r\n        })\r\n     }\r\n    render(){\r\n       \r\n        return(\r\n            <header className=\"header\">\r\n                <h1>what to do ?</h1>\r\n                <input \r\n                value={this.state.value}\r\n                onChange ={event => this.setState({value: event.target.value})}\r\n                onKeyDown = {\r\n                    event=>this.handleKeyDown(event)\r\n                }\r\n                type=\"text\"\r\n                className=\"new-todo\"\r\n                placeholder=\"what needs to be done?\"/>\r\n\r\n          </header>)\r\n    }\r\n}","import React , { Component } from \"react\"\r\nimport {observer} from \"mobx-react\"\r\n\r\n\r\n@observer\r\n class Todoitem extends Component {\r\n     onToggle = () =>{\r\n         this.props.todo.toggle()\r\n     }\r\n     Destroy = () =>{\r\n         this.props.todo.handleDestroy()\r\n     }\r\n    render(){\r\n        const {todo} = this.props\r\n        return(\r\n        \r\n                <li className= {todo.completed ? \"completed \" : \"\" }>\r\n                    <div className=\"view\">\r\n                            <input \r\n                            onChange ={this.onToggle}\r\n                            type =\"checkbox\" className=\"toggle\" value=\"on\" checked={todo.completed}/>\r\n\r\n                            <label>{todo.title}</label>\r\n                            <button className= \"destroy\" onClick={this.Destroy} />\r\n                    </div>\r\n                </li>\r\n          \r\n             \r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Todoitem;","import React , {Component} from \"react\"\r\n\r\nimport Todoitem from \"./todoitem\"\r\n\r\nimport addtodo from \"../stroe/addtodo\"\r\n\r\nimport {observer} from \"mobx-react\"\r\nimport { COMPLETED_TODOS, ACTIVE_TODOS,ALL_TODOS } from \"../constants\";\r\n\r\n@observer\r\n class Todoitems extends Component{\r\n\r\n  getVisibleTodos() {\r\n\t\treturn addtodo.todos.filter(todo => {\r\n\t\t\tswitch (addtodo.todosfiltered) {\r\n\t\t\t\tcase ACTIVE_TODOS:\r\n\t\t\t\t\treturn !todo.completed;\r\n\t\t\t\tcase COMPLETED_TODOS:\r\n\t\t\t\t\treturn todo.completed;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});}\r\n    \r\n    render(){\r\n        return(\r\n              <section className=\"main\">\r\n              <ul className=\"todo-list\">\r\n\r\n             {\r\n               addtodo.todoss.map(todo=>{    \r\n                 return (\r\n                   <Todoitem  todo={todo}/>\r\n                 )\r\n               })\r\n             }\r\n                \r\n                {/* <li>\r\n                  <div className=\"view\">\r\n                    <input type=\"checkbox\" className=\"toggle\" value=\"on\" />\r\n                    <label>new work</label>\r\n                    <button className=\"destry\"></button>\r\n\r\n                  </div>\r\n                </li>\r\n              <Todoitem /> */}\r\n              </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default Todoitems","import React,{Component} from \"react\"\r\nimport addtodo from \"../stroe/addtodo\"\r\nimport {observer} from \"mobx-react\"\r\n\r\n@observer\r\nclass Footer extends Component {\r\n    \r\n\tclearCompleted = () => {\r\n\t\taddtodo.clearCompleted() ;\r\n    };\r\n\r\n  \r\n    getall(){\r\n        addtodo.getall()  \r\n    }\r\n    getactive(){\r\n        addtodo.getactive()\r\n    }\r\n    getcompleted(){\r\n        addtodo.getcompleted()\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"footer\">\r\n                <span className=\"todo-count\">\r\n         <strong style={{backgroundColor:\"yellow\"}}>{addtodo.activeTodoCount}</strong> باقی    \r\n                </span>\r\n\r\n                <ul className=\"filters\" >\r\n                    <li className=\"bt\" onClick={this.getall}>all</li>\r\n                    <li className=\"bt\" onClick={this.getactive} >active</li>\r\n                    <li className=\"bt\" onClick={this.getcompleted} >completed</li>\r\n                </ul>\r\n                { addtodo.completedCount === 0\r\n\t\t\t\t\t? null\r\n\t\t\t\t\t: \t<button\r\n\t\t\t\t\t\t\tclassName=\"clear-completed\"\r\n\t\t\t\t\t\t\tonClick={this.clearCompleted}>\r\n\t\t\t\t\t\t\tClear completed\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t}\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default Footer","import React,{ Component } from 'react';\nimport './App.css';\nimport { observer }  from \"mobx-react\"\n\nimport Todoheader from \"./components/todoheader\"\nimport Todoitems from \"./components/todoitems\"\n\nimport Footer from \"./components/footer\"\n\n \n@observer\nclass App extends Component {\n\n  render() {\n    return (\n          <div id=\"todoapp\" className=\"todoapp\">\n            <Todoheader />  \n            <Todoitems /> \n            <Footer />\n          </div>\n          \n    );\n}\n\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}